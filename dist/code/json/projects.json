[{"title":"Cocos2d iOS Game: Balloon Burst","description":"<p>An iOS game for children written using Objective-C and Cocos2d. Balloons float up from the bottom of the screen. Touch them to pop them, yielding a  falling treasure. The balloons have a letter on them and a word beginning with that letter will sound. </p>\n<p>The game features simple particle effects and custom recorded sounds using Audacity for sound isolation.</p>\n","platform":"iOS","languages":["Objective-C"],"tags":["educational game"],"tools":["XCode","Cocos2d","Audacity"],"links":[{"type":"article","url":"http://jamie.ly/wordpress/programming/libraries/cocos2d-ios-game-balloon-burst/"},{"type":"source","url":"http://github.com/jamiely/ios-balloon-burst"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2012/01/balloon-burst-old-treasures-01.png"},{"type":"image","url":"http://www.angelforge.org/wordpress/wp-content/uploads/2012/01/balloon-burst-ipad-play-01.png"},{"type":"video","url":"http://www.youtube.com/watch?v=W6FI7X5PjN8"}],"slug":"balloon-burst"},{"title":"Bunny Matcher","platform":"iOS","languages":["Objective-C"],"tools":["XCode","XVim","shenzhen","OCunit","Inkscape","ImageMagick","bxfr"],"opensource":true,"description":"<p>Bunny Matcher is a native iOS puzzle game written in Objective-C.  It has the same concept as the classic game  <a href=\"http://www.youtube.com/watch?v=9RtRykIE_1A\">Super Munchers</a>. </p>\n<p>You control a bunny which must match words on a grid to a presented topic. For example, if the topic is Planets, you may have to select words like Mars, Earth, and Venus.  </p>\n<p>Conflict comes in the form of non-topic words, which penalize the player by hurting his score, and a fox that moves across the board. The player must avoid the fox, as touching the fox costs 1 of 3 total lives.</p>\n","links":[{"type":"article","url":"http://blog.jamie.ly/software/2013/01/09/ios-app-bunny-matcher.html","title":"iOS App: Bunny Matcher"},{"type":"iTunes","url":"https://itunes.apple.com/us/app/bunny-matcher/id590498392?ls=1&mt=8"},{"type":"source","url":"https://github.com/jamiely/bunny-matcher"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2013/01/iOS-Simulator-Screen-shot-Dec-31-2012-11.54.42-PM.png"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2013/01/bunny_sprites.png"}],"tags":["objective-c","game development","educational game","svg"],"slug":"bunny-matcher"},{"title":"Buzzy Bingo","platform":"iOS","languages":["Objective-C","Ruby"],"description":"<p>I was chatting with a co-worker the other day about project management, and we mentioned the prevalence of buzzwords. Then, we mentioned Buzzword Bingo, and I decided that to implement a Bingo application as an iOS app. I looked up Buzzword Bingo in the app store and only saw two implementations. I figured I’d write this anyway as it’s a simple and well known concept and I need the practice anyway. </p>\n<p>The app uses OCUnit for unit tests, Core Data to store word lists, and storyboards for layout. A simple server is written using the Sinatra light-weight Ruby web framework.</p>\n","tags":["bingo","game development","REST","web framework"],"tools":["OCUnit","Core Data","Sinatra"],"links":[{"type":"article","url":"http://jamie.ly/wordpress/programming/software/buzzy-bingo/"},{"type":"iTunes","url":"https://itunes.apple.com/us/app/buzzy-bingo/id570491609?ls=1&mt=8"},{"type":"source","url":"https://github.com/jamiely/buzzword-bingo"},{"type":"video","url":"http://www.youtube.com/watch?v=U8R1hvOoXKM"},{"type":"image","url":"https://raw.githubusercontent.com/jamiely/buzzword-bingo-ios/master/BuzzwordBingo/Assets/Default-Landscape.png"}],"slug":"buzzy-bingo"},{"title":"Font Awesome Browser","languages":["Java"],"description":"<p>A gallery and exporter for Font Awesome glyphs. Written in Java for Android.</p>\n","tags":["fonts","gallery"],"platform":"Android","tools":["Font Awesome","Eclipse"],"links":[{"type":"article","url":"http://jamie.ly/wordpress/programming/software/font-awesome-browser"},{"type":"play store","url":"https://play.google.com/store/apps/details?id=ly.jamie.fontawesomebrowser"},{"type":"source","url":"https://github.com/jamiely/Font-Awesome-Browser-Android"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2012/11/screenshot_icon_export.png"}],"slug":"font-awesome-browser"},{"title":"Jumbly","languages":["Objective-C"],"description":"<p>Jumbly is a word jumble-type game for iOS, written in Objective-C. You are given two words. Starting with the first word, you must create a new word by changing a single letter, and keep doing so, until you arrive at the last word.  </p>\n<p>Jumbly is a port of a previous project in ColdFusion, and uses the same word corpus. A seed word is selected randomly and subsequent words are selected by searching the corpus with a regular expression derived from that seed. Finally, the chain of words between the seed and final  word are masked, and the user is presented with the beginning and ending words.</p>\n","platform":"iOS","tags":["word game","game development","puzzle game"],"application":null,"links":[{"type":"article","url":"http://jamie.ly/wordpress/programming/software/jumbly-a-jumble-game-for-ios"},{"type":"iTunes","url":"https://itunes.apple.com/us/app/jumbly/id575537890"},{"type":"source","url":"https://github.com/jamiely/jumbly"},{"type":"image","url":"http://www.angelforge.org/wordpress/wp-content/uploads/2012/11/screenshot_menu_iphone.png"},{"type":"image","url":"http://www.angelforge.org/wordpress/wp-content/uploads/2012/11/screenshot_portrait_iphone5.png"}],"slug":"jumbly"},{"title":"Simulator","description":"<p>Simulator is a Ruby gem which provides functionality for creating discrete time models, and running those models. It provides a simple DSL for defining variables and equations on those variables that you can use to simulate something such as a ball dropping or financial model.</p>\n","tags":["simulation","mathematics"],"platform":"Ruby","languages":["Ruby"],"tools":["gem"],"links":[{"type":"article","url":"http://blog.jamie.ly/libraries/2013/01/28/simulator-ruby-gem.html"},{"type":"rubygems","url":"https://rubygems.org/gems/simulator"},{"type":"source","url":"https://github.com/jamiely/simulator"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2013/01/mortgage.png"}],"slug":"simulator-gem"},{"title":"Tetris Attack in Clojurescript","description":"<p>An implementation of <a href=\"http://en.wikipedia.org/wiki/Tetris_Attack\">Tetris Attack</a>, the beloved puzzle game in Clojurescript.  </p>\n<p>The game has a treasured place in my heart having provided me with hundreds of hours of entertainment. The object of the game is to match 3 or more blocks.  The complexity of the game comes in setting off chain reactions of matches, which throw garbage blocks onto your  opponent&#39;s screen that he has to clear. </p>\n<p>This project gave me a greater sense about how to write more idiomatic Clojure, including usage of the thread-first macro, and a good use case for multimethods (implementing them in my code is a todo). Additionally, this was one of my first completely (almost) functional games, and so  was a great stepping stone in helping me to think functionally.</p>\n","platform":"web","languages":["Clojurescript","JavaScript"],"tools":["Chrome Web Developer"],"opensource":true,"links":[{"type":"demo","url":"http://jamie.ly/labs/tetris-attack-clojurescript/index.html","title":"Tetris Attack Clojurescript Demo"},{"type":"source","url":"https://github.com/jamiely/simple-clojure-game"},{"type":"article","url":"http://jamie.ly/wordpress/programming/software/clojurescript-tetris-attack","title":"Tetris Attack in Clojurescript"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2013/02/8c8eb47.png","slug":"image-play"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2013/02/0b1d1da-gameover.png","slug":"image-gameover"},{"type":"video","url":"http://www.youtube.com/watch?v=WWK8RFEY04I"}],"tags":["tetris","tetris attack","pokemon puzzle league","profiling","functional programming","game development","puzzle"],"slug":"tetris-attack-cljs"},{"title":"The Other Philadelphia","languages":["Ruby","HTML","CSS"],"opensource":false,"platform":"web","tools":["Rails","Facebook Connect"],"description":"<p>A Rails app with FB auth bringing the faceless statistics of Philadelphia close to home by applying them to your Facebook friends.</p>\n","links":[{"type":"article","url":"http://jamie.ly/wordpress/programming/code-for-america-philly-2012"},{"type":"image","url":"http://jamie.ly/wordpress/wp-content/uploads/2012/02/Screen-Shot-2012-02-28-at-9.59.31-PM.png"}],"slug":"the-other-philadelphia"}]